@rendermode InteractiveServer

@implements IDisposable
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager NavigationManager

    <div class="navmenu">
        <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu"  style="height:100%" Width="200" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
            <AuthorizeView>
                <Authorized>
                        <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())" IconColor="Color.Accent">Home</FluentNavLink>
                        @* <FluentNavLink Href="counter" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())" IconColor="Color.Accent">Counter</FluentNavLink>
                        <FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())" IconColor="Color.Accent">Weather</FluentNavLink> *@
                        <div style="position: absolute; bottom: 0; left: 0; width: 200px;">
                            <FluentNavLink Href="Account/Manage">@context.User.Identity?.Name</FluentNavLink>
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <FluentButton Type="ButtonType.Submit" Style="width: 100%;">Logout</FluentButton>
                            </form>
                        </div>
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="Account/Register">Register</FluentNavLink>
                    <FluentNavLink Href="Account/Login">Login</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </FluentNavMenu>
        </nav>
    </div>

@code {
    private bool expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
